version: '3'
services: 

  #api:
  #  image: maso-api:latest
  #  # you can use legacy debug config or new inspect
  #  # NOTE: if nodemon isn't restarting on changes, you might be on Windows
  #  # which has trouble seeing file changes, so add -L to use legacy polling
  #  # https://github.com/remy/nodemon#application-isnt-restarting
  #  #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
  #  command: node ./api/src/cluster.js
  #  container_name: maso-api
  #  ports:
  #    - "80:3000"
  #  volumes:
  #    - ./:/opt/app:delegated
  #    # - ./games/game-of-trust/web/src/:/opt/app/src/game/web/src:delegated
  #    # - ./games/game-of-trust/core/:/opt/app/src/game/core:delegated
  #    # - ./games/game-of-trust/config.json:/opt/app/src/game/config.json:delegated
  #    # - ./core/:/opt/app/src/core:delegated
  #    # bind-mounting these two files in will let you add packages during development without rebuilding
  #    # for example, to add bower to your app while developing, just install it inside the container
  #    # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
  #    # be saved on host for next build
  #    # docker-compose exec node npm install --save bower
  #    - ./package.json:/opt/package.json
  #    - ./package-lock.json:/opt/package-lock.json
  #    # this is a workaround to prevent host node_modules from accidentally getting mounted in container
  #    # in case you want to use node/npm both outside container for test/lint etc. and also inside container
  #    # this will overwrite the default node_modules dir in container so it won't conflict with our
  #    # /opt/node_modules location. Thanks to PR from @brnluiz
  #    - notused:/opt/app/node_modules
  #  environment:
  #    - NODE_ENV=development
  #  depends_on:
  #    - database
  #    - redis
  #  healthcheck:
  #    disable: true
#
  # Configure a database service in a container
  database:
    image: sameersbn/postgresql:latest
    container_name: maso-db
    environment:
    - DB_NAME=maso-local,maso-test
    - PG_TRUST_LOCALNET=true
    ports:
    - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Configure a redis server in a container
  redis:
    image: redis:latest
    container_name: maso-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
    - 6379:6379

volumes:
  notused: